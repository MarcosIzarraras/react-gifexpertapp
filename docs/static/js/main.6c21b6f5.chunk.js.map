{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAAGR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACvEN,EAAc,KAId,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,uDAFR,mCAEQ,cACwDC,UAAWH,GADnE,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,MAAO,CACnCC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,UAAUZ,QARX,kBAWZM,GAXY,4CAAH,sDCFPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACVa,ECDY,SAACb,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KASA,OAJAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAX,GAAM,OAAIS,EAAS,CAAEf,KAAKM,EAAQO,SAAQ,SAClE,CAACpB,IAEGqB,EDTeI,CAAazB,GAA5BO,KAEP,OACI,qCACI,6BAAMP,IACN,qBAAKgB,UAAU,8CAAf,SACMH,EAAOJ,KAAK,SAAAiB,GAAK,OAAI,cAAC,EAAD,eAAgCA,GAAdA,EAAMf,aENlDgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,+CAEI,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,Y,MCbtC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6c21b6f5.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) setCategories(cat => [inputValue, ...cat]);\r\n        setInputValue('');\r\n    };\r\n\r\n    return(\r\n        <form onSubmit={ handleSubmit }>\r\n            <input type=\"text\" value={inputValue} onChange={ handleInputChange } />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","const apiKey = 'TY8FCoFmxjmPrkp9CgFTtB8O36OCOXIO';\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${ apiKey }&q=${ encodeURI( category ) }&limit=10` \r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => { return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized.url\r\n    } });\r\n\r\n    return gifs;\r\n};","export const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return ( \r\n        <div className=\"card\">\r\n            <img src={ url } alt={title} />\r\n            <p>{title}</p>\r\n        </div> \r\n    );\r\n}","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const {data:images} = useFetchGifs(category);\r\n\r\n    return(\r\n        <>\r\n            <h3>{ category }</h3>\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                { images.map( image => <GifGridItem key={image.id} {...image} />) }\r\n            </div>\r\n        </>\r\n    );\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[], \r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(images => setstate({ data:images, loading:false }));\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () =>{\r\n\r\n    const [categories, setCategories] = useState(['one punch']);\r\n\r\n    return(\r\n        <div>\r\n            GifExpertApp\r\n            <hr />\r\n\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                        <GifGrid key={category} category={ category } />\r\n                    )\r\n                }\r\n            </ol>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}